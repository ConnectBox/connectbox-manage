#!/usr/bin/node

const
	functions = require('./functions.js'),
	usage = require('./usage.js');

var args = process.argv;
// Remove the first two arguments (interpreter + node program)
args.shift(); // Remove /usr/bin/node
args.shift(); // Remove path to script
//console.log(args);

var command = args[0];
var key = args[1];
var value = args[2];
var secondValue = args[3];

if (!command || command.toLowerCase() == 'help') {
	console.log(usage.text);
}
else {
	switch (command){
		case 'get':
			if (key.toLowerCase() === 'brand') {
				console.log(functions.getBrand(value));
			}
			else if (key.toLowerCase() === 'logs') {
				console.log(functions.getLogs(value));
			}
			else if (key.toLowerCase().startsWith('lms_')) {
				const callback = async ()	=>	{
					let res;
					if (secondValue) {
						res = await functions.get[key](value, secondValue);
					} else {
						res = await functions.get[key](value);
					}
					console.dir(res, { depth:null });
				};
				callback();
			}
			else {
				console.log(functions.get[key]());
			}
		break;
		case 'del':
			if (key.toLowerCase().startsWith('lms_')) {
				const callback = async ()	=>	{
					let res;
					if (secondValue) {
						res = await functions.del[key](value, secondValue);
					} else {
						res = await functions.del[key](value);
					}
					console.dir(res, { depth:null });
				};
				callback();
			}
			else {
				console.log(functions.del[key]());
			}
		break;
		case 'post':
			if (key.toLowerCase().startsWith('lms_')) {
				const callback = async ()	=>	{
					let res;
					if (secondValue) {
						res = await functions.post[key](value, secondValue);
					} else {
						res = await functions.post[key](value);
					}
					console.dir(res, { depth:null });
				};
				callback();
			}
			else {
				console.log(functions.post[key]());
			}
		break;
		case 'put':
			if (key.toLowerCase().startsWith('lms_')) {
				const callback = async ()	=>	{
					let res;
					if (secondValue) {
						res = await functions.put[key](value, secondValue);
					} else {
						res = await functions.put[key](value);
					}
					console.dir(res, { depth:null });
				};
				callback();
			}
			else {
				var response = functions.get[key]();
				if (typeof response === 'object') {
					console.log(JSON.stringify(response))
				}
				else {
					console.log(response);
				}
			}
		break;
		case 'set':
			if (key.toLowerCase() === 'brand') {
				var values = value.split('=');
				var payload = {value:`${values[0]}=${values[1]}`};
				console.log(functions.setBrand(payload));
			}
			else {
				console.log(functions.set[key]({value:value}));
			}
		break;
		case 'do':
				console.log(functions.doCommand[key]({value:value}));
		break;
	}
}
